name: Deploy Roles Microservices to EC2

on:
  push:
    paths:
      - 'services/users/roles/**'
    branches:
      - qa

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  EC2_ROLES_HOST: ${{ secrets.EC2_ROLES_HOST }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
  EC2_KEYPAIR: ${{ secrets.EC2_KEYPAIR }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Login en Docker Hub
      - name: Login to Docker Hub
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      # 3Ô∏è‚É£ Build & Push Docker Images
      - name: Build & Push Docker Images
        working-directory: services/users/roles
        run: |
          services=("assign-role-service" "list-roles-service" "remove-role-service")
          for svc in "${services[@]}"; do
            docker build -t "$DOCKER_USERNAME/${svc}:latest" "./${svc}"
            docker push "$DOCKER_USERNAME/${svc}:latest"
          done

      # 4Ô∏è‚É£ Crear directorio en EC2
      - name: Create deployment directory on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.EC2_ROLES_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_KEYPAIR }}
          script: |
            mkdir -p /home/ubuntu/roles-deployment

      # 5Ô∏è‚É£ Copiar docker-compose al EC2 (VERSI√ìN CORREGIDA)
      - name: Copy docker-compose to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.EC2_ROLES_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_KEYPAIR }}
          source: "docker-compose.roles-deploy.yml"
          target: "/home/ubuntu/roles-deployment/"
          working-directory: "services/users/roles"

      # 6Ô∏è‚É£ Crear archivos .env en EC2
      - name: Create .env files on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.EC2_ROLES_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_KEYPAIR }}
          script: |
            echo "üîß Generando archivos .env..."
            MONGO_URI="${{ secrets.ROLES_MONGO_URI }}"

            declare -A PORTS=(
              [assign-role]=${{ secrets.ASSIGN_ROLE_PORT }}
              [list-roles]=${{ secrets.LIST_ROLE_PORT }}
              [remove-role]=${{ secrets.REMOVE_ROLE_PORT }}
            )

            for svc in "${!PORTS[@]}"; do
              mkdir -p "/home/ubuntu/roles-deployment/${svc}-service"
              echo "PORT=${PORTS[$svc]}" > "/home/ubuntu/roles-deployment/${svc}-service/.env"
              echo "MONGO_URI=$MONGO_URI" >> "/home/ubuntu/roles-deployment/${svc}-service/.env"
            done

      # 7Ô∏è‚É£ Desplegar servicios en EC2
      - name: Deploy Services
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.EC2_ROLES_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_KEYPAIR }}
          script: |
            cd /home/ubuntu/roles-deployment
            echo "üõë Deteniendo servicios anteriores..."
            docker compose -f docker-compose.roles-deploy.yml down || true
            
            echo "üîΩ Obteniendo im√°genes actualizadas..."
            docker compose -f docker-compose.roles-deploy.yml pull
            
            echo "üöÄ Iniciando servicios..."
            docker compose -f docker-compose.roles-deploy.yml up -d
            
            echo "‚úÖ Verificaci√≥n final:"
            docker ps -a
            docker compose -f docker-compose.roles-deploy.yml ps

      # 8Ô∏è‚É£ Verificaci√≥n adicional
      - name: Health Check
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.EC2_ROLES_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_KEYPAIR }}
          script: |
            echo "üß™ Realizando pruebas de conectividad..."
            curl -v http://localhost:3009/health || echo "Assign Role Service no responde"
            curl -v http://localhost:3010/health || echo "List Roles Service no responde"
            curl -v http://localhost:3011/health || echo "Remove Role Service no responde"